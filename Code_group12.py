# -*- coding: utf-8 -*-
"""Assignment.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1WfjUf5aCd8ygFUNec9syGwvkMvFVR4QG
"""

import numpy as np
import matplotlib.pyplot as plt
from scipy.stats import norm
import scipy.stats as si
import pandas as pd
import seaborn as sns
sns.set_style("whitegrid")

#hard inputs
S_one=20
S_two=20

rf=0.03

s1=0.3
s2=0.1

corr=-0.5

q1=0.01
q2=0.01

T=1 # years

"""### Stocks distribution"""

np.random.seed(42)
S1_T_dist=[]
S2_T_dist=[]
for i in range(1,1000):

  Z1=np.random.standard_normal()
  Z2=np.random.standard_normal()

  S1_T_dist.append(S_one * np.exp((rf - q1 - (s1 ** 2) / 2) * T + s1 * np.sqrt(T) * Z1))
  S2_T_dist.append(S_two * np.exp((rf - q2 - (s2 ** 2) / 2) * T + s2 * np.sqrt(T) * (corr * Z1 + np.sqrt(1 - corr ** 2) * Z2)))

sns.set_style("whitegrid")

fig, axes = plt.subplots(2, 1, figsize=(15, 5), sharex=True)
fig.suptitle('Price distribution at time T')

sns.distplot(S1_T_dist, hist=True, kde=True, 
    bins="auto", color = 'darkblue', 
    hist_kws={'edgecolor':'black'},
    kde_kws={'linewidth': 4},
            ax=axes[0],)
axes[0].set_title("Stock One")

sns.distplot(S2_T_dist, hist=True, kde=True, 
    bins="auto", color = 'darkblue', 
    hist_kws={'edgecolor':'black'},
    kde_kws={'linewidth': 4},
    ax=axes[1])
axes[1].set_title("Stock Two")

plt.show()

"""### Closed formula pricing

"""

# closed formula

def closed(S_one, S_two, s1, s2, corr, q1, q2,T):
  sigma_tot=np.sqrt((s1**2) + (s2**2) - (2 * s1 * s2 * corr))
  
  d1 = (np.log(S_one/S_two) + (q2-q1+(sigma_tot**2)/2)*T)/(sigma_tot*np.sqrt(T))
  
  d2 = d1 - sigma_tot * np.sqrt(T)

  option_value = ((S_one * (np.exp(-q1*T))) * norm.cdf(d1)) - (S_two * np.exp(-q2*T) * norm.cdf(d2))

  return option_value

closed(S_one, S_two, s1, s2, corr, q1, q2, T)

"""### Montecarlo simulation"""

def Monte(n, i):
  while i<n:
    Z1=np.random.standard_normal()
    Z2=np.random.standard_normal()
    S1_T= S_one * np.exp((rf - q1 - (s1 ** 2) / 2) * T + s1 * np.sqrt(T) * Z1)
    S2_T= S_two * np.exp((rf - q2 - (s2 ** 2) / 2) * T + s2 * np.sqrt(T) * (corr * Z1 + np.sqrt(1 - corr ** 2) * Z2))

    payoff=S1_T-S2_T

    if payoff>0:
      values.append(payoff*np.exp(-rf*T))  

    else:
      values.append(0)
    i+=1

np.random.seed(42)
rep=np.arange(5, 10001, 50)
results=[]
CI_95_low=[]
CI_95_high=[]
CI_99_low=[]
CI_99_high=[]

for n in rep:
  i=0
  values=[]
  Monte(n, i)
  mean_values=np.mean(values)
  results.append(mean_values)

  CI_95_low.append(mean_values - np.std(values) * 1.96 / np.sqrt(n))
  CI_95_high.append(mean_values + np.std(values) * 1.96 / np.sqrt(n))
  CI_99_low.append(mean_values - np.std(values) * 2.576 / np.sqrt(n))
  CI_99_high.append(mean_values + np.std(values) * 2.576 / np.sqrt(n))  

final=pd.DataFrame([rep, results, CI_95_low, CI_95_high, CI_99_low, CI_99_high]).T
final.columns=["repetitions", "price", "CI_95_low", "CI_95_high", "CI_99_low", "CI_99_high" ]
final

closed_formula_price=closed(S_one, S_two, s1, s2, corr, q1, q2, T)

final["rel_error"]=final.price.apply(lambda x: np.abs(x - closed_formula_price)/x)

final

plt.figure(figsize=(10,10))
plt.plot(final["repetitions"], final["rel_error"])
plt.title("relative error evolution increasing number of iterations")
plt.xlabel("iterations")
plt.ylabel('relative error')

import seaborn as sns
sns.set_style("whitegrid")
plt.figure(figsize=(15,10))

################
plt.title("Price evolution increasing number of iterations")
################

plt.plot(final["repetitions"], final["price"], label="monte carlo")
plt.plot(final["repetitions"], final["CI_95_low"], label="CI_95_low", linestyle="--", alpha=0.5, c="red")
plt.plot(final["repetitions"], final["CI_95_high"], label="CI_95_high", linestyle="--", alpha=0.5, c="red")
plt.plot(final["repetitions"], final["CI_99_low"], label="CI_99_low", linestyle="--", alpha=0.5, c="green")
plt.plot(final["repetitions"], final["CI_99_high"], label="CI_99_high", linestyle="--", alpha=0.5, c="green")
plt.axhline(y=closed(S_one, S_two, s1, s2, corr, q1, q2, T), color='r', linestyle='-', label="closed formula")
plt.xlabel("Iterations")
plt.ylabel("Price")
plt.legend(loc=4)

"""### Sensitivity analysis (correlation)"""

corr_list=np.arange(-1, 1, 0.01)

results=[]
CI_95_low=[]
CI_95_high=[]
CI_99_low=[]
CI_99_high=[]
n=10001

np.random.seed(42)
for corr in corr_list:
  values=[]
  Monte(n, 0)
  mean_values=np.mean(values)
  results.append(mean_values)
  CI_95_low.append(mean_values - np.std(values) * 1.96 / np.sqrt(n))
  CI_95_high.append(mean_values + np.std(values) * 1.96 / np.sqrt(n))
  CI_99_low.append(mean_values - np.std(values) * 2.576 / np.sqrt(n))
  CI_99_high.append(mean_values + np.std(values) * 2.576 / np.sqrt(n))  

final=pd.DataFrame([corr_list, results, CI_95_low, CI_95_high, CI_99_low, CI_99_high]).T
final.columns=["correlation", "price", "CI_95_low", "CI_95_high", "CI_99_low", "CI_99_high" ]
final

final["closed_formula_value"]=final["correlation"].apply(lambda x: closed(S_one, S_two, s1, s2, x, q1, q2, T))

import seaborn as sns
sns.set_style("whitegrid")
plt.figure(figsize=(15,10))

##########################
plt.title("Price evolution as correlation changes")
##########################

plt.plot(final["correlation"], final["price"], label="monte carlo")
plt.plot(final["correlation"], final["CI_95_low"], label="CI_95_low", linestyle="--", alpha=0.5, c="red")
plt.plot(final["correlation"], final["CI_95_high"], label="CI_95_high", linestyle="--", alpha=0.5, c="red")
plt.plot(final["correlation"], final["CI_99_low"], label="CI_99_low", linestyle="--", alpha=0.5, c="green")
plt.plot(final["correlation"], final["CI_99_high"], label="CI_99_high", linestyle="--", alpha=0.5, c="green")
plt.plot(final["correlation"], final["closed_formula_value"], label="closed formula price", c="red")
plt.ylabel("Price")
plt.xlabel("Correlation")
plt.legend(loc=3)

"""### Sensitivity analysis (sigma 1 and sigma 2)

correlation = -0.5
"""

corr=-0.5

s1_list=np.arange(0.01, 0.5, 0.01)
s2_list=np.arange(0.01, 0.5, 0.01)

results=[]
CI_95_low=[]
CI_95_high=[]
CI_99_low=[]
CI_99_high=[]
s1_data=[]
s2_data=[]
n=10001

np.random.seed(42)
for s1 in s1_list:
  for s2 in s2_list:
    values=[]
    Monte(n, 0)
    mean_values=np.mean(values)
    results.append(mean_values)
    CI_95_low.append(mean_values - np.std(values) * 1.96 / np.sqrt(n))
    CI_95_high.append(mean_values + np.std(values) * 1.96 / np.sqrt(n))
    CI_99_low.append(mean_values - np.std(values) * 2.576 / np.sqrt(n))
    CI_99_high.append(mean_values + np.std(values) * 2.576 / np.sqrt(n))  
    s1_data.append(s1)
    s2_data.append(s2)

final=pd.DataFrame([s1_data, s2_data, results, CI_95_low, CI_95_high, CI_99_low, CI_99_high]).T
final.columns=["s1", "s2", "price", "CI_95_low", "CI_95_high", "CI_99_low", "CI_99_high" ]
final

fig = plt.figure(figsize=(10,10))

ax = plt.axes(projection='3d')

ax.scatter3D(final["s1"], final["s2"], final["price"], c=final["price"], cmap='hot')

ax.view_init(30, 150)

ax.set_xlabel('s1', fontsize=15)

ax.set_ylabel('s2', fontsize=15)

ax.set_zlabel("price", fontsize=15)

plt.title("Correlation = -0.5")

closed_formula_values=[]
for i in final.index:
  s1=final.iloc[i, 0]
  s2=final.iloc[i, 1]
  g=closed(S_one, S_two, s1,s2, corr, q1,q2,T)
  closed_formula_values.append(g)
final["closed_formula_value"]=closed_formula_values

rel_error=[]
for i in final.index:
  x=final.iloc[i, 2]
  y=final.iloc[i, 7] 
  rel_error.append(np.abs(x - y)/x)

final["rel_error"]= rel_error

final

fig = plt.figure(figsize=(10,10))
ax = plt.axes(projection='3d')

ax.scatter3D(final["s1"], final["s2"], final["rel_error"], c=final["rel_error"], cmap='hot')

ax.view_init(30, 150)

ax.set_xlabel('s1')

ax.set_ylabel('s2')

ax.set_zlabel("rel_error")

plt.title("Relative error distribution ; Correlation = -0.5")

"""correlation =  +0.5

"""

corr=0.5

s1_list=np.arange(0.01, 0.5, 0.01)
s2_list=np.arange(0.01, 0.5, 0.01)

results=[]
CI_95_low=[]
CI_95_high=[]
CI_99_low=[]
CI_99_high=[]
s1_data=[]
s2_data=[]
n=10001

np.random.seed(42)
for s1 in s1_list:
  for s2 in s2_list:
    values=[]
    Monte(n,0)
    mean_values=np.mean(values)
    results.append(mean_values)
    CI_95_low.append(mean_values - np.std(values) * 1.96 / np.sqrt(n))
    CI_95_high.append(mean_values + np.std(values) * 1.96 / np.sqrt(n))
    CI_99_low.append(mean_values - np.std(values) * 2.576 / np.sqrt(n))
    CI_99_high.append(mean_values + np.std(values) * 2.576 / np.sqrt(n))  
    s1_data.append(s1)
    s2_data.append(s2)

final=pd.DataFrame([s1_data, s2_data, results, CI_95_low, CI_95_high, CI_99_low, CI_99_high]).T
final.columns=["s1", "s2", "price", "CI_95_low", "CI_95_high", "CI_99_low", "CI_99_high" ]
final

fig = plt.figure(figsize=(10,10))
ax = plt.axes(projection='3d')

ax.scatter3D(final["s1"], final["s2"], final["price"], c=final["price"], cmap='hot')

ax.view_init(30, 150)

ax.set_xlabel('s1', fontsize=15)

ax.set_ylabel('s2', fontsize=15)

ax.set_zlabel("price", fontsize=15)

plt.title("Correlation = +0.5")

final

closed_formula_values=[]
for i in final.index:
  s1=final.iloc[i, 0]
  s2=final.iloc[i, 1]
  g=closed(S_one, S_two, s1,s2, corr, q1,q2,T)
  closed_formula_values.append(g)
final["closed_formula_value"]=closed_formula_values

rel_error=[]
for i in final.index:
  x=final.iloc[i, 2]
  y=final.iloc[i, 7] 
  rel_error.append(np.abs(x - y)/x)

final["rel_error"]= rel_error

final

fig = plt.figure(figsize=(10,10))
ax = plt.axes(projection='3d')

ax.scatter3D(final["s1"], final["s2"], final["rel_error"], c=final["rel_error"], cmap='hot')

ax.view_init(30, 150)

ax.set_xlabel('s1')

ax.set_ylabel('s2')

ax.set_zlabel("rel_error")

plt.title("Relative error distribution ; Correlation = +0.5")

"""### Sensitivity analysis (S_one and S_two)"""

corr=-0.5
s1=0.2
s2=0.2

S_one_list=np.arange(5, 35 , 0.5)
S_two_list=np.arange(5, 35 , 0.5)

results=[]
CI_95_low=[]
CI_95_high=[]
CI_99_low=[]
CI_99_high=[]
S_one_data=[]
S_two_data=[]
n=10001

np.random.seed(42)
for S_one in S_one_list:
  for S_two in S_two_list:
    values=[]
    Monte(n,0)
    mean_values=np.mean(values)
    results.append(mean_values)
    CI_95_low.append(mean_values - np.std(values) * 1.96 / np.sqrt(n))
    CI_95_high.append(mean_values + np.std(values) * 1.96 / np.sqrt(n))
    CI_99_low.append(mean_values - np.std(values) * 2.576 / np.sqrt(n))
    CI_99_high.append(mean_values + np.std(values) * 2.576 / np.sqrt(n))  
    S_one_data.append(S_one)
    S_two_data.append(S_two)

final=pd.DataFrame([S_one_data, S_two_data, results, CI_95_low, CI_95_high, CI_99_low, CI_99_high]).T
final.columns=["S_one", "S_two", "price", "CI_95_low", "CI_95_high", "CI_99_low", "CI_99_high" ]
final

fig = plt.figure(figsize=(10,10))
ax = plt.axes(projection='3d')

ax.scatter3D(final["S_one"], final["S_two"], final["price"], c=final["price"], cmap='hot')


ax.view_init(30, 150)

ax.set_xlabel('Stock 1', fontsize=15)

ax.set_ylabel('Stock 2', fontsize=15)

ax.set_zlabel("price", fontsize=15)

closed_formula_values=[]
for i in final.index:
  S_one=final.iloc[i, 0]
  S_two=final.iloc[i, 1]
  g=closed(S_one, S_two, s1 ,s2, corr, q1,q2,T)
  closed_formula_values.append(g)
final["closed_formula_value"]=closed_formula_values

rel_error=[]
for i in final.index:
  x=final.iloc[i, 2]
  y=final.iloc[i, 7] 
  rel_error.append(np.abs(x - y)/x)

final["rel_error"]= rel_error

final[final["price"]!=0].sort_values("rel_error")

fig = plt.figure(figsize=(10,10))
ax = plt.axes(projection='3d')

ax.scatter3D(final["S_one"], final["S_two"], final["rel_error"], c=final["rel_error"], cmap='hot')

ax.view_init(30, 50)

ax.set_xlabel('Stock one')

ax.set_ylabel('Stock two')

ax.set_zlabel("rel_error")

ax.set_zlim3d(0, 30)

plt.title("Relative error distribution")

"""### Sensitivity analysis (q1 and q2)"""

S_one=20
S_two=20

q1_list=np.arange(0, 0.101 , 0.005)
q2_list=np.arange(0, 0.101 , 0.005)

results=[]
CI_95_low=[]
CI_95_high=[]
CI_99_low=[]
CI_99_high=[]
q1_data=[]
q2_data=[]
n=10001

np.random.seed(42)
for q1 in q1_list:
  for q2 in q2_list:
    values=[]
    Monte(n, 0)
    mean_values=np.mean(values)
    results.append(mean_values)
    CI_95_low.append(mean_values - np.std(values) * 1.96 / np.sqrt(n))
    CI_95_high.append(mean_values + np.std(values) * 1.96 / np.sqrt(n))
    CI_99_low.append(mean_values - np.std(values) * 2.576 / np.sqrt(n))
    CI_99_high.append(mean_values + np.std(values) * 2.576 / np.sqrt(n))  
    q1_data.append(q1)
    q2_data.append(q2)

final=pd.DataFrame([q1_data, q2_data, results, CI_95_low, CI_95_high, CI_99_low, CI_99_high]).T
final.columns=["q1", "q2", "price", "CI_95_low", "CI_95_high", "CI_99_low", "CI_99_high" ]
final

fig = plt.figure(figsize=(10,10))
ax = plt.axes(projection='3d')

ax.scatter3D(final["q1"], final["q2"], final["price"], c=final["price"], cmap='hot')

ax.view_init(30, 50)

ax.set_xlabel('q1', fontsize=15)

ax.set_ylabel('q2', fontsize=15)

ax.set_zlabel("price", fontsize=15)

closed_formula_values=[]
for i in final.index:
  q1=final.iloc[i, 0]
  q2=final.iloc[i, 1]
  g=closed(S_one, S_two, s1, s2, corr, q1, q2, T)
  closed_formula_values.append(g)
final["closed_formula_value"]=closed_formula_values

rel_error=[]
for i in final.index:
  x=final.iloc[i, 2]
  y=final.iloc[i, 7] 
  rel_error.append(np.abs(x - y)/x)

final["rel_error"]= rel_error

fig = plt.figure(figsize=(10,10))
ax = plt.axes(projection='3d')

ax.scatter3D(final["q1"], final["q2"], final["rel_error"], c=final["rel_error"], cmap='hot')

ax.view_init(30, 50)

ax.set_xlabel('q1')

ax.set_ylabel('q2')

ax.set_zlabel("rel_error")

plt.title("Relative error distribution")